generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String            @id @default(uuid())
  username     String            @unique
  fullName     String
  email        String            @unique
  passwordHash String 
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Friend Request Relation
  sentRequests     FriendRequest[] @relation("sentRequests")
  receivedRequests FriendRequest[] @relation("receivedRequests")

  // Friendships
  UserFriends   Friend[] @relation("UserFriends")
  UserFriendOf  Friend[] @relation("UserFriendOf")

  // Chat Participation
  chatParticipants ChatParticipant[]
  messages         Message[]        // messages this user has sent
}

model Friend {
  id        String   @id @default(uuid())
  userId    String
  friendId  String
  createdAt DateTime @default(now())

  user   User @relation("UserFriends", fields: [userId], references: [id])
  friend User @relation("UserFriendOf", fields: [friendId], references: [id])

  @@unique([userId, friendId]) // Prevent duplicate friendships
}

model FriendRequest {
  id        String        @id @default(uuid())
  fromId    String
  toId      String
  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  from User @relation("sentRequests", fields: [fromId], references: [id])
  to   User @relation("receivedRequests", fields: [toId], references: [id])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Chat { 
  id           String            @id @default(uuid())
  participants ChatParticipant[]
  messages     Message[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model ChatParticipant {
  id     String @id @default(uuid())
  chatId String
  userId String

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId]) // each user can only be in a chat once
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  chat   Chat @relation(fields: [chatId], references: [id])
  sender User @relation(fields: [senderId], references: [id])

  @@index([chatId])
}